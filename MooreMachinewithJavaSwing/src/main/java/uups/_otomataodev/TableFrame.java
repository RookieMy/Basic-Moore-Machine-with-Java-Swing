package uups._otomataodev;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;


public class TableFrame extends javax.swing.JFrame {

   
    //data of table
        JComboBox<String>[][] cBoxArray;
        
    public TableFrame() {
        initComponents();
    }
    
    //Setting frame basic properties
    public void ShowFrame(int length,String[] alphabet,String possibleOutput[])
    {
        this.setSize(1000,500);
        this.setLocationRelativeTo(null);
        
        //setting transition table
        JPanel transitionTable=CreateTransitionTable(length,alphabet,possibleOutput);
        JButton setTable=new JButton("FINISH");
        this.setLayout(new GridLayout(2,1));
        this.add(transitionTable);
        this.add(setTable);
        this.setVisible(true);
        
        setTable.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int ctrl=0;
                
                //control the table if it's not valid
        upper:  for(int i=0;i<length;i++)
                {
                    for(int j=0;j<(alphabet.length)+1;j++)
                    {
                        if(cBoxArray[i][j].getSelectedIndex()==0)
                        {
                            ctrl=1;
                            JOptionPane.showMessageDialog(null, "Not Valid!","ERROR!",JOptionPane.ERROR_MESSAGE);
                            break upper;
                        }
                    }
                }
                if(ctrl==0)
                {
                    //createing graph and showing last part
                    OutputFrame of=new OutputFrame();
                    Graph graf=CreateGraph(cBoxArray,alphabet,possibleOutput,length);
                    of.SetOutputFrame(graf, alphabet);
                }
            }
        
    
        });
    }
    
    
    private JPanel CreateTransitionTable(int length,String[] alphabet,String[] posOut)
    {
        cBoxArray=new JComboBox[length][alphabet.length+1];
        JPanel transitionTable=new JPanel();
        //creating table
        transitionTable.setLayout(new GridLayout(length+1,(alphabet.length)+2));
        transitionTable.add(new JLabel(" Old State "));
        
        for(String i : alphabet)
        {
            transitionTable.add(new JLabel("Input "+i));
        }
        
        transitionTable.add(new JLabel("Output"));
        
        for(int i =0;i<length;i++)
        {
            transitionTable.add(new JLabel("Q"+Integer.toString(i)));
            for(int j=0;j<(alphabet.length);j++)
            {
                cBoxArray[i][j]=createComboBox(length);
                transitionTable.add(cBoxArray[i][j]);
            }
            cBoxArray[i][alphabet.length]=createOutput(posOut);
            transitionTable.add(cBoxArray[i][alphabet.length]);
        }
        return transitionTable;
    }
    
    //creating combobox for outputs
    private JComboBox<String> createOutput(String pos[])
    {
        DefaultComboBoxModel<String> model=new DefaultComboBoxModel<>();
        model.addElement("-");
        for(int i=0;i<pos.length;i++)
        {
            model.addElement(Integer.toString(i));
        }
        
        return new JComboBox<String>(model);
    }
    
    //creating combobox for choosing new state
    private JComboBox<String> createComboBox(int len)
    {
        DefaultComboBoxModel<String> model=new DefaultComboBoxModel<>();
        model.addElement("-");
        for(int i=0;i<len;i++)
        {
            model.addElement("Q"+Integer.toString(i));
        }
        
        return new JComboBox<String>(model);
    }
    
    //graph creating
    private Graph CreateGraph(JComboBox<String>[][] cBox,String[] alf,String[] out,int len)
    {
        Graph graf=new Graph(len,alf.length);
        for(int i=0;i<graf.states.length;i++)
        {
            graf.states[i].output=cBox[i][alf.length].getSelectedIndex()-1;
            for(int j=0;j<alf.length;j++)
            {
                graf.states[i].transitions[j]=new Transition(graf.states[cBox[i][j].getSelectedIndex()-1]);
            }
        }
        return graf;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1010, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 548, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
